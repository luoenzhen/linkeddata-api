openapi: "3.0.0"

info:
  title: Example
  version: "1.0"
# servers:
#   # base path for api
#   # e.g. swagger ui will be at /api/v1.0/ui/
#   - url: /api/v1.0

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    OpenID:
      type: openIdConnect
      # TODO: template this url
      openIdConnectUrl: https://auth-test.tern.org.au/auth/realms/local/.well-known/openid-configuration
    # TODO: could also define api key via custom header, cookie or url parameter
    ApiKeyAuth:
      type: apiKey
      # TODO: openapi-core validates against hard coded scheme
      # scheme: apikey-v1
      # TODO: could also just use BasicAuth auth scheme for apiKey?? -> need to parse basic auth header accordingly to see whether it's user:pw or apikey
      in: header # can be "header", "query" or "cookie"
      name: Authorization
  schemas:
    ClassItem:
      title: ClassItem
      type: object
      properties:
        id:
          title: IRI of class
          type: string
        label:
          title: Label of class
          type: string

security:
  - BasicAuth: []
  - BearerAuth: []
  # colud define list of scopes here
  - OpenID: []
  - ApiKeyAuth: []

paths:
  /classes/flat:
    get:
      summary: Get a flat list of classes
      description: Get a flat list of classes ordered by label.
      responses:
        "200":
          description: A list of classes ordered by label.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClassItem"
  /example:
    get:
      summary: Generate greeting
      description: Generates a greeting message.
      responses:
        "200":
          description: greeting response
          content:
            application/json:
              schema:
                type: object
  /example/{name}:
    post:
      summary: Generate greeting
      description: Generates a greeting message.
      responses:
        "200":
          description: greeting response
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Forbidden
      parameters:
        - name: name
          in: path
          description: Name of the person to greet.
          required: true
          schema:
            type: string
            example: "dave"
