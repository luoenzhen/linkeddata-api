openapi: "3.0.0"

info:
  title: TERN's Linked Data Services API
  description: A set of web APIs to power TERN's Linked Data Services website.
  version: "1.0"
  license:
    name: Creative Commons 4.0
    url: https://creativecommons.org/version4
  termsOfService: https://www.tern.org.au/datalicence/
  contact:
    email: esupport@tern.org.au
    name: TERN eSupport
    url: https://ternaus.atlassian.net/wiki/spaces/TERNSup/overview
# servers:
#   # base path for api
#   # e.g. swagger ui will be at /api/v1.0/ui/
#   - url: /api/v1.0

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    OpenID:
      type: openIdConnect
      # TODO: template this url
      openIdConnectUrl: https://auth-test.tern.org.au/auth/realms/local/.well-known/openid-configuration
    # TODO: could also define api key via custom header, cookie or url parameter
    ApiKeyAuth:
      type: apiKey
      # TODO: openapi-core validates against hard coded scheme
      # scheme: apikey-v1
      # TODO: could also just use BasicAuth auth scheme for apiKey?? -> need to parse basic auth header accordingly to see whether it's user:pw or apikey
      in: header # can be "header", "query" or "cookie"
      name: Authorization
  schemas:
    ClassItem:
      title: ClassItem
      type: object
      properties:
        id:
          title: IRI of class
          type: string
        label:
          title: Label of class
          type: string

security:
  - BasicAuth: []
  - BearerAuth: []
  # colud define list of scopes here
  - OpenID: []
  - ApiKeyAuth: []

paths:
  /version:
    get:
      tags:
        - General
      summary: Application version
      description: Get the application's version
      responses:
        "200":
          description: The application's version.
          content:
            plain/text:
              schema:
                type: string

  /ontology_viewer/classes/flat:
    get:
      tags:
        - Ontology viewer
      summary: Get a flat list of classes
      description: Get a flat list of classes ordered by label.
      parameters:
        - in: query
          name: ontology_id
          schema:
            type: string
          required: true
          description: The ontology ID internally known to the Linked Data API.
          examples:
            tern_ontology:
              summary: Request classes from the TERN Ontology
              value: tern-ontology
            unknown_id:
              summary: An unknown ontology ID
              value: non-existent-id
      responses:
        "200":
          description: A list of classes ordered by label.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClassItem"
        "404":
          description: Unknown ontology ID
          content:
            text/plain:
              schema:
                type: string