openapi: "3.0.0"

info:
  title: TERN's Linked Data Services API
  description: A set of web APIs to power TERN's Linked Data Services website.
  version: "1.0"
  license:
    name: Creative Commons 4.0
    url: https://creativecommons.org/version4
  termsOfService: https://www.tern.org.au/datalicence/
  contact:
    email: esupport@tern.org.au
    name: TERN eSupport
    url: https://ternaus.atlassian.net/wiki/spaces/TERNSup/overview
# servers:
#   # base path for api
#   # e.g. swagger ui will be at /api/v1.0/ui/
#   - url: /api/v1.0

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    OpenID:
      type: openIdConnect
      # TODO: template this url
      openIdConnectUrl: https://auth-test.tern.org.au/auth/realms/local/.well-known/openid-configuration
    # TODO: could also define api key via custom header, cookie or url parameter
    ApiKeyAuth:
      type: apiKey
      # TODO: openapi-core validates against hard coded scheme
      # scheme: apikey-v1
      # TODO: could also just use BasicAuth auth scheme for apiKey?? -> need to parse basic auth header accordingly to see whether it's user:pw or apikey
      in: header # can be "header", "query" or "cookie"
      name: Authorization
  schemas:
    ClassItem:
      title: ClassItem
      type: object
      properties:
        id:
          title: IRI of class
          type: string
        label:
          title: Label of class
          type: string
    URI:
      title: URI
      type: object
      properties:
        type:
          type: string
        label:
          type: string
        value:
          type: string
        internal:
          type: boolean
    Literal:
      title: Literal
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        datatype:
          type: string
        language:
          type: string
    PredicateObjects:
      title: Predicate objects
      type: object
      properties:
        predicate: 
          type: object
          $ref: "#/components/schemas/URI"
        objects:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/URI"
              - $ref: "#/components/schemas/Literal"

security:
  - BasicAuth: []
  - BearerAuth: []
  # colud define list of scopes here
  - OpenID: []
  - ApiKeyAuth: []

paths:
  /version:
    get:
      tags:
        - General
      summary: Application version
      description: Get the application's version
      responses:
        "200":
          description: The application's version.
          content:
            plain/text:
              schema:
                type: string

  /resource:
    get:
      tags:
        - General
      summary: Get RDF resource
      description: Get an RDF resource by its URI in an RDF4J repository.
      parameters:
        - in: query
          name: repository_id
          schema: 
            type: string
          required: true
          description: The RDF4J repository.
          examples:
            nrm_vocabs:
              summary: NRM vocabs repository
              value: dawe_vocabs_core
        - in: query
          name: uri
          schema:
            type: string
          required: true
          description: The URI of the resource.
          examples:
            nrm_index:
              summary: NRM vocab URI
              value: https://linked.data.gov.au/def/nrm
        - in: query
          name: include_incoming_relationships
          schema:
            type: string
          description: Include incoming relationships
          examples:
            true:
              value: true
            false:
              value: false
      responses:
        "200":
          description: RDF resource
          content:
            application/n-triples:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
        "404":
          description: Resource of URI not found.
          content:
            text/html:
              schema:
                type: string
        "502":
          description: Error communicating with the database.
          content:
            text/html:
              schema:
                type: string

  /ontology_viewer/classes/flat:
    get:
      tags:
        - Ontology viewer
      summary: Get a flat list of classes
      description: Get a flat list of classes ordered by label.
      parameters:
        - in: query
          name: ontology_id
          schema:
            type: string
          required: true
          description: The ontology ID internally known to the Linked Data API.
          examples:
            tern_ontology:
              summary: Request classes from the TERN Ontology
              value: tern-ontology
            unknown_id:
              summary: An unknown ontology ID
              value: non-existent-id
      responses:
        "200":
          description: A list of classes ordered by label.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClassItem"
        "404":
          description: Unknown ontology ID
          content:
            text/plain:
              schema:
                type: string
        "502":
          description: Gateway error

  /vocab_viewer/nrm/vocabs:
    get:
      tags:
        - NRM vocabularies
      summary: Get a list of NRM protocol vocabularies
      description: Get a list of concept schemes and collections for the NRM protocol.
      responses:
        "200":
          description: A list of concept schemes and collections.
          content:
            application/json:
              schema:
                type: array
                items:
                  title: Vocabulary item
                  type: object
                  properties:
                    id:
                      title: IRI of item
                      type: string
                    label:
                      title: Label of item
                      type: string
                    description:
                      title: The description of the item
                      type: string
                    created:
                      title: The date when the resource was created
                      type: string
                    modified: 
                      title: The date when the resource was modified
                      type: string
        "502":
          description: Gateway error

  /vocab_viewer/nrm/resource:
    get:
      tags: 
        - NRM vocabularies
      summary: Get a resource's description
      description: A JSON payload used to render frontend user-interfaces.
      parameters:
        - in: query
          name: uri
          schema:
            type: string
          required: true
          description: URI of the resource.
          examples:
            nrm:
              summary: NRM index
              value: https://linked.data.gov.au/def/nrm
        - in: query
          name: sparql_endpoint
          schema:
            type: string
          required: true
          description: SPARQL endpoint
          examples:
            nrm:
              summary: NRM SPARQL endpoint
              value: https://graphdb.tern.org.au/repositories/dawe_vocabs_core
      responses:
        "200":
          description: A resource's description
          content:
            application/json:
              schema:
                type: object
                properties:
                  uri:
                    type: string
                  label:
                    type: string
                  types:
                    type: array
                    items:
                      $ref: "#/components/schemas/URI"
                  properties:
                    type: array
                    items:
                      $ref: "#/components/schemas/PredicateObjects"
        "404":
          description: Resource with URI not found
          content:
            text/plain:
              schema:
                type: string
  
  /rdf_tools/convert:
    post:
      tags:
        - RDF Tools
      summary: Convert from one RDF format to another
      description: This uses Python's RDFLib to convert.
      # parameters:
      #   - in: header
      #     name: accept
      #     required: true
      #     schema:
      #       type: string
      #       enum: 
      #         - text/turtle
      #         - application/ld+json
      requestBody:
        description: The payload data
        required: true
        content:
          application/ld+json:
            schema:
              type: string
              example:
                "@context":
                  "name": "http://schema.org/name"
                  "image":
                    "@id": "http://schema.org/image"
                    "@type": "@id"
                  "homepage":
                    "@id": "http://schema.org/url"
                    "@type": "@id"
                "name": "Manu Sporny"
                "homepage": "http://manu.sporny.org/"
                "image": "http://manu.sporny.org/images/manu.png"
          text/turtle:
            schema:
              type: string
              example: |
                @prefix ns1: <http://schema.org/> .

                [] ns1:image <http://manu.sporny.org/images/manu.png> ;
                    ns1:name "Manu Sporny" ;
                    ns1:url <http://manu.sporny.org/> .
      responses:
        "200":
          description: Convert
          content:
            text/turtle:
              example: |
                @prefix ns1: <http://schema.org/> .

                [] ns1:image <http://manu.sporny.org/images/manu.png> ;
                    ns1:name "Manu Sporny" ;
                    ns1:url <http://manu.sporny.org/> .
            application/ld+json:
              schema:
                type: string
                example:
                  "@context":
                  "name": "http://schema.org/name"
                  "image":
                    "@id": "http://schema.org/image"
                    "@type": "@id"
                  "homepage":
                    "@id": "http://schema.org/url"
                    "@type": "@id"
                  "name": "Manu Sporny"
                  "homepage": "http://manu.sporny.org/"
                  "image": "http://manu.sporny.org/images/manu.png"